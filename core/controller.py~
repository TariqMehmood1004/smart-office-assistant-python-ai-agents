from agents.room_agent import RoomAgent
from agents.meeting_agent import MeetingAgent
from nlp.parser import parse_command


class AgentSystem:
    def __init__(self):
        self.room = RoomAgent("MeetingRoom1")
        self.meeting = MeetingAgent()
        self.ai = GeminiAI()

    def handle_command(self, text):
        intent, response = self.ai.detect_intent(text)
        if intent == "schedule_meeting":
            # Example: Extract time and participants from the response if needed
            time = "2PM"  # You can use AI to extract time from the response
            participants = ["Alice", "Bob"]  # Extract participants if mentioned
            return self.meeting.schedule_meeting(time, participants)
        elif intent == "toggle_device":
            action = "on"  # AI can help determine the action (e.g., on/off)
            return self.room.toggle_device("lights", action == "on")
        elif intent == "update_occupancy":
            value = 5  # You can get the occupancy number from the AI response
            return self.room.update_occupancy(value)
        return response  # Return AI's response if the intent is not recognized

    def schedule_meeting(self, time, participants):
        meeting = {"time": time, "participants": participants}
        self.schedule.append(meeting)  # Add to the schedule
        return meeting

    def toggle_device(self, device, action):
        return self.room.toggle_device(device, action == "on")

    def update_occupancy(self, value):
        return self.room.update_occupancy(value)

    def get_schedule(self):
        # Return the current schedule
        return self.schedule
